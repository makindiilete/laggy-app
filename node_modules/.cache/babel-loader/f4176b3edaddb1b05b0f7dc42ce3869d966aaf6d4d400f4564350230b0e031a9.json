{"ast":null,"code":"/**\n * Generates a large dataset of 10,000 users for search demonstration\n * This creates intentionally large data to showcase performance issues\n * with unoptimized React components\n *\n * @returns {Array<Object>} Array of 10,000 user objects with various properties\n */\nexport const generateLargeDataset = () => {\n  const data = [];\n  const domains = [\"gmail.com\", \"yahoo.com\", \"outlook.com\", \"company.com\", \"example.org\"];\n  const departments = [\"Engineering\", \"Marketing\", \"Sales\", \"HR\", \"Finance\", \"Product\", \"Design\", \"Operations\"];\n  for (let i = 1; i <= 10000; i++) {\n    const firstName = `FirstName${i}`;\n    const lastName = `LastName${i % 100}`; // Create some duplicated last names\n    const domainIndex = i % domains.length;\n    const deptIndex = i % departments.length;\n    data.push({\n      id: i,\n      name: `${firstName} ${lastName}`,\n      email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${domains[domainIndex]}`,\n      department: departments[deptIndex],\n      salary: 50000 + Math.floor(Math.random() * 100000),\n      joinDate: new Date(Date.now() - Math.floor(Math.random() * 5 * 365 * 24 * 60 * 60 * 1000)).toISOString().split(\"T\")[0]\n    });\n  }\n  return data;\n};","map":{"version":3,"names":["generateLargeDataset","data","domains","departments","i","firstName","lastName","domainIndex","length","deptIndex","push","id","name","email","toLowerCase","department","salary","Math","floor","random","joinDate","Date","now","toISOString","split"],"sources":["/Users/michael.akindilete/Desktop/Dev/Frontend reviews/laggy app/src/utils/generateData.js"],"sourcesContent":["/**\n * Generates a large dataset of 10,000 users for search demonstration\n * This creates intentionally large data to showcase performance issues\n * with unoptimized React components\n *\n * @returns {Array<Object>} Array of 10,000 user objects with various properties\n */\nexport const generateLargeDataset = () => {\n  const data = [];\n  const domains = [\n    \"gmail.com\",\n    \"yahoo.com\",\n    \"outlook.com\",\n    \"company.com\",\n    \"example.org\",\n  ];\n  const departments = [\n    \"Engineering\",\n    \"Marketing\",\n    \"Sales\",\n    \"HR\",\n    \"Finance\",\n    \"Product\",\n    \"Design\",\n    \"Operations\",\n  ];\n\n  for (let i = 1; i <= 10000; i++) {\n    const firstName = `FirstName${i}`;\n    const lastName = `LastName${i % 100}`; // Create some duplicated last names\n    const domainIndex = i % domains.length;\n    const deptIndex = i % departments.length;\n\n    data.push({\n      id: i,\n      name: `${firstName} ${lastName}`,\n      email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${\n        domains[domainIndex]\n      }`,\n      department: departments[deptIndex],\n      salary: 50000 + Math.floor(Math.random() * 100000),\n      joinDate: new Date(\n        Date.now() - Math.floor(Math.random() * 5 * 365 * 24 * 60 * 60 * 1000)\n      )\n        .toISOString()\n        .split(\"T\")[0],\n    });\n  }\n\n  return data;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,OAAO,GAAG,CACd,WAAW,EACX,WAAW,EACX,aAAa,EACb,aAAa,EACb,aAAa,CACd;EACD,MAAMC,WAAW,GAAG,CAClB,aAAa,EACb,WAAW,EACX,OAAO,EACP,IAAI,EACJ,SAAS,EACT,SAAS,EACT,QAAQ,EACR,YAAY,CACb;EAED,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,KAAK,EAAEA,CAAC,EAAE,EAAE;IAC/B,MAAMC,SAAS,GAAG,YAAYD,CAAC,EAAE;IACjC,MAAME,QAAQ,GAAG,WAAWF,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;IACvC,MAAMG,WAAW,GAAGH,CAAC,GAAGF,OAAO,CAACM,MAAM;IACtC,MAAMC,SAAS,GAAGL,CAAC,GAAGD,WAAW,CAACK,MAAM;IAExCP,IAAI,CAACS,IAAI,CAAC;MACRC,EAAE,EAAEP,CAAC;MACLQ,IAAI,EAAE,GAAGP,SAAS,IAAIC,QAAQ,EAAE;MAChCO,KAAK,EAAE,GAAGR,SAAS,CAACS,WAAW,CAAC,CAAC,IAAIR,QAAQ,CAACQ,WAAW,CAAC,CAAC,IACzDZ,OAAO,CAACK,WAAW,CAAC,EACpB;MACFQ,UAAU,EAAEZ,WAAW,CAACM,SAAS,CAAC;MAClCO,MAAM,EAAE,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC;MAClDC,QAAQ,EAAE,IAAIC,IAAI,CAChBA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CACvE,CAAC,CACEI,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC;EACJ;EAEA,OAAOvB,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}